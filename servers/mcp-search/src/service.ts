import type { JsonRpcReq, JsonRpcRes } from '@mcp/common/transport.js';
type Doc={id:string,url:string,title:string,text:string};
const corpus:Doc[]=[{id:'1',url:'https://example.com/',title:'Example Domain',text:'Example Domain is for use in illustrative examples in documents.'},{id:'2',url:'https://example.com/more',title:'More Examples',text:'More sample pages for search testing and ranking.'}];
const tokenize=(s:string)=>s.toLowerCase().replace(/[^a-z0-9\s]/g,' ').split(/\s+/).filter(Boolean);
const idx=(()=>{const tf=new Map<string,Map<string,number>>(); const df=new Map<string,number>(); let total=0; for(const d of corpus){const terms=tokenize(d.title+' '+d.text); total+=terms.length; const counts=new Map<string,number>(); for(const t of terms) counts.set(t,(counts.get(t)||0)+1); tf.set(d.id,counts); for(const t of new Set(terms)) df.set(t,(df.get(t)||0)+1);} return {tf,df,avg: total/Math.max(1,corpus.length)};})();
function bm25(q:string, top=10){const N=corpus.length; const qterms=tokenize(q); const scores=new Map<string,number>(); for(const d of corpus) scores.set(d.id,0); for(const q of qterms){const n=idx.df.get(q)||0; if(!n) continue; const idf=Math.log((N-n+0.5)/(n+0.5)+1); for(const d of corpus){const tf=idx.tf.get(d.id)?.get(q)||0; const dl=Array.from(idx.tf.get(d.id)?.values()||[]).reduce((a,b)=>a+b,0)||1; const add=idf*(tf*(1.2+1))/(tf+1.2*(1-0.75+0.75*(dl/idx.avg))); scores.set(d.id,(scores.get(d.id)||0)+add);} } return Array.from(scores.entries()).sort((a,b)=>b[1]-a[1]).slice(0,top);}
const snip=(t:string,q:string,m=200)=>{const i=t.toLowerCase().indexOf(q.toLowerCase()); if(i<0) return t.slice(0,m); const s=Math.max(0,i-40), e=Math.min(t.length,i+m-40); return (s?'…':'')+t.slice(s,e)+(e<t.length?'…':'');}
export async function handle(req: JsonRpcReq): Promise<JsonRpcRes>{ const id=req.id??null; try{
  if(req.method==='search.query'){ const {q,site,top_k=10,include_snippets=true}=req.params||{}; const ranked=bm25(q||'',top_k*2); const out:any[]=[]; for(const [id2,score] of ranked){const d=corpus.find(x=>x.id===id2)!; if(site&& !d.url.includes(site)) continue; out.push({url:d.url,title:d.title,snippet: include_snippets? snip(d.text,q||''):undefined,score:Number(score.toFixed(6)),source:'local-bm25'}); if(out.length>=top_k) break;} return {jsonrpc:'2.0',id,result:{results:out}};}
  if(req.method==='search.hybrid'){ const {q,top_k=10}=req.params||{}; const ranked=bm25(q||'',top_k); const out=ranked.map(([id2,score])=>{const d=corpus.find(x=>x.id===id2)!; return {url:d.url,title:d.title,score:Number(score.toFixed(6)),source:'local-bm25'};}); return {jsonrpc:'2.0',id,result:{results:out}};}
  return {jsonrpc:'2.0',id,error:{code:'method_not_found',message:`Unknown method ${req.method}`}};
 }catch(e:any){ return {jsonrpc:'2.0',id,error:{code:'internal',message:String(e?.message||e)}}; } }
