import type { JsonRpcReq, JsonRpcRes } from '@mcp/common/transport.js'; import Database from 'better-sqlite3';
const DB_FILE=process.env.ANALYTICS_DB||'./analytics.db'; const db=new Database(DB_FILE); db.exec(`CREATE TABLE IF NOT EXISTS presence(id INTEGER PRIMARY KEY AUTOINCREMENT,query TEXT,engine TEXT,seen INTEGER,citations INTEGER,details TEXT,ts DATETIME DEFAULT (strftime('%Y-%m-%dT%H:%M:%SZ','now')), UNIQUE(query,engine,ts)); CREATE TABLE IF NOT EXISTS kpi_points(id INTEGER PRIMARY KEY AUTOINCREMENT,metric TEXT,t DATETIME,v REAL,src TEXT DEFAULT 'csv', UNIQUE(metric,t,src));`);
export async function handle(req: JsonRpcReq): Promise<JsonRpcRes>{ const id=req.id??null; try{
  if(req.method==='analytics.presence.log'){ const {query,engine,seen,citations=null,details=null}=req.params||{}; db.prepare('INSERT OR IGNORE INTO presence(query,engine,seen,citations,details) VALUES (?,?,?,?,?)').run(query,engine,seen?1:0,citations,details); return {jsonrpc:'2.0',id,result:{ok:true}}; }
  if(req.method==='analytics.presence.get'){ const {queries=[],engine,from,to}=req.params||{}; const q=queries.length? 'AND query IN ('+queries.map(()=>'?').join(',')+')':''; const stmt=db.prepare(`SELECT query,engine,seen as s,citations,ts FROM presence WHERE engine=? AND date(ts) BETWEEN date(?) AND date(?) ${q} ORDER BY ts ASC`); const rows=stmt.all(engine,from,to,*queries); return {jsonrpc:'2.0',id,result:{presence: rows.map(r=>({query:r.query,engine:r.engine,seen:!!r.s,citations:r.citations??undefined,timestamp:r.ts}))}}; }
  if(req.method==='analytics.kpi.get'){ const {metrics,from,to}=req.params||{}; const series:any[]=[]; for(const m of metrics||[]){const rows=db.prepare('SELECT t,v FROM kpi_points WHERE metric=? AND date(t) BETWEEN date(?) AND date(?) ORDER BY t ASC').all(m,from,to); series.push({metric:m,points: rows.map(r=>({t:r.t,v:r.v}))}); } return {jsonrpc:'2.0',id,result:{series}}; }
  return {jsonrpc:'2.0',id,error:{code:'method_not_found',message:`Unknown method ${req.method}`}};
 }catch(e:any){ return {jsonrpc:'2.0',id,error:{code:'internal',message:String(e?.message||e)}}; } }
