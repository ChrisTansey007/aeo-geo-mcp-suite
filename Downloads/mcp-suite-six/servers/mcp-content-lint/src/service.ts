import type { JsonRpcReq, JsonRpcRes } from '@mcp/common/transport.js';
function fk(s:string){const sentences=(s.match(/[^.!?]+[.!?]+/g)||[s]).length; const words=(s.trim().split(/\s+/).filter(Boolean)).length||1; const syll=(s.toLowerCase().match(/[aeiouy]+/g)||[]).length||Math.ceil(words*1.3); const ASL=words/Math.max(1,sentences); const ASW=syll/Math.max(1,words); return Number((0.39*ASL+11.8*ASW-15.59).toFixed(1));}
export async function handle(req: JsonRpcReq): Promise<JsonRpcRes>{ const id=req.id??null; try{
  if(req.method==='lint.style'){ const {text}=req.params||{}; const issues:any[]=[]; if(!(text||'').slice(0,400).match(/TL;DR:|Summary:|TLDR:/)) issues.push({rule:'tldr.missing',severity:'error',span:{line:1,start:0,end:0},fix:'Add TL;DR near top.'}); if(/\bclick here\b/i.test(text||'')) issues.push({rule:'forbidden.phrase',severity:'warn',span:{line:1,start:(text||'').toLowerCase().indexOf('click here'),end:(text||'').toLowerCase().indexOf('click here')+10},fix:'Use descriptive link text.'}); return {jsonrpc:'2.0',id,result:{issues}}; }
  if(req.method==='lint.readability'){ const {text,target_grade=8}=req.params||{}; const grade=fk(text||''); const notes:string[]=[]; if(grade>target_grade) notes.push(`Aim for grade â‰¤ ${target_grade}.`); return {jsonrpc:'2.0',id,result:{grade,notes}}; }
  if(req.method==='lint.citations'){ const {text}=req.params||{}; const has=/\[[0-9]+\]|\(https?:\/\/\S+\)/.test(text||''); const suggestions: string[]=[]; for(const m of (text||'').match(/(\$\d[\d,]*(?:\.\d+)?|\b\d{4}\b|\b\d+(?:%|x)\b)/g)||[]) suggestions.push(`Add a citation for '${m}'.`); return {jsonrpc:'2.0',id,result:{has_citation:has,suggestions}}; }
  return {jsonrpc:'2.0',id,error:{code:'method_not_found',message:`Unknown method ${req.method}`}};
 }catch(e:any){ return {jsonrpc:'2.0',id,error:{code:'internal',message:String(e?.message||e)}}; } }
